@page "/user/add"
@page "/user/edit/{Id:int}"
@using MartinGilDemo.Shared;
@using MartinGilDemo.Client.Services;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUserService userService;
<h1>@Title User</h1>
<hr />
@if (message != string.Empty)
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}
<EditForm Model="@user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="FirstName" class="form-label">FirstName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.FirstName" />
        </div>
        <ValidationMessage For="@(() => user.FirstName)" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">LastName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.LastName" />
        </div>
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div class="mb-3">
        <label for="MobileNumber" class="form-label">MobileNumber</label>
        <div class="col-md-4">
            <input type="number" @bind-value="@user.MobileNumber" @bind-value:event="oninput" />
        </div>
        <ValidationMessage For="@(() => user.MobileNumber)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    protected Person user = new();

    private string message = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            user = await userService.GetUserById(Id);
        }
    }
    protected async Task SaveUser()
    {
        message = string.Empty;
        if (user.Id != 0)
        {
          
            var id = await userService.UpdateUserDetails(user);
            if (true)
            {
                Cancel();

            }

            message = "Something went wrong, please try again.";
        }
        else
        {
            var id = await userService.AddUser(user);

            if (id != 0)
            {
                Cancel();
            }

            message = "Something went wrong, please try again.";
        }
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }
}